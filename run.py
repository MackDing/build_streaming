# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtGui import QTextCursor
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.uic.properties import QtWidgets
from build import RunDataset
from PyQt5 import QtCore, QtGui, QtWidgets


class MyThread(QThread):
    my_str = pyqtSignal(str)  # 创建任务信号
    files = []
    # type = None
    image_id = None
    dataset_path = None

    def run(self):
        """
            多线程功能函数
            :return:
        """
        print("此处省略1万行代码")  # 单独开启线程的逻辑代码
        run = RunDataset(image_id=self.image_id,
                         dataset_path=self.files,
                         new_package_name=self.new_package_name)
        self.my_str.emit(f'开始封装......')
        run.start_container()
        run.run_script()
        self.my_str.emit(f'Successful！封装完成, 封装后镜像为：\n{self.new_package_name}')
        # run.get_result()


class Ui_MainWindow(object):
    def __init__(self):
        self.image_id = None
        # self.type = None
        self.file_name = None
        self.my_thread = MyThread()
        self.my_thread.my_str.connect(self.get_sin_out)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("封装流媒体工具v1.0")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(230, 280, 461, 192))
        self.textBrowser.setObjectName("textBrowser")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(230, 90, 461, 21))
        self.lineEdit.setObjectName("lineEdit")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(110, 80, 81, 31))
        self.label.setObjectName("label")

        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(230, 190, 461, 21))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setEnabled(True)

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(90, 190, 121, 21))
        self.label_3.setObjectName("label_3")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(230, 140, 461, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setEnabled(True)

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(80, 140, 121, 31))
        self.pushButton.setObjectName("pushButton")

        self.pushButton.clicked.connect(self.select_dataset)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(230, 230, 121, 31))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_2.clicked.connect(self.run_script)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "封装流媒体工具v1.0"))
        self.label.setText(_translate("MainWindow", "原镜像地址*"))
        self.label_3.setText(_translate("MainWindow", "新流媒体版本包名称*"))
        self.pushButton.setText(_translate("MainWindow", "选择vas/ias版本包*"))
        self.pushButton_2.setText(_translate("MainWindow", "开始封装"))

    def get_sin_out(self, out_str):
        """
        :param out_str:
        :return:
        """
        print(out_str)
        self.textBrowser.append(out_str)

    def get_image_id(self):
        self.image_id = self.lineEdit.text()
        return self.image_id

    def select_dataset(self):
        self.file_name, fileType = QtWidgets.QFileDialog.getOpenFileName(None, "选取⽂件", '/',
                                                                         "Zip Files (*.zip *.gz)")

        self.lineEdit_2.setText(self.file_name)
        print("file_name:", self.file_name)

    def show_msg(self, msg):
        self.textBrowser.moveCursor(QTextCursor.End)
        self.textBrowser.append(msg)

    def run_script(self):
        print("run")

        self.my_thread.image_id = self.get_image_id()

        self.my_thread.files = self.file_name

        self.my_thread.new_package_name = self.lineEdit_3.text()
        self.show_msg(f'镜像：{self.my_thread.image_id}')
        self.show_msg(f'文件路径：{self.my_thread.files}')

        self.show_msg(f'封装后镜像：{self.my_thread.new_package_name}')

        print(self.my_thread.image_id)
        print(self.my_thread.files)

        print(self.my_thread.new_package_name)
        self.my_thread.start()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

"""
#打包执行
(base) D:\Extreme Vision\Mack\Code\build_streaming> pyinstaller -F -w run.py -p docker_command.py -p linux_command.py D:\Extreme Vision\Mack\Code\build_streaming\dist
"""
